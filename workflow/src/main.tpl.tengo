// light block with no workflow
wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
sampledColsConv := import(":sampled-cols-conv")
sampledColsUmapConv := import(":sampled-cols-umap-conv")
slices := import("@platforma-sdk/workflow-tengo:slices")
umapConv := import(":pf-umap-conv")

wf.prepare(func(args){
	// We need a table with cluster ID (optional) | clonotype id | selected ranking columns

	bundleBuilder := wf.createPBundleBuilder()
	bundleBuilder.ignoreMissingDomains() // to make query work for both bulk and single cell data
	bundleBuilder.addAnchor("main", args.inputAnchor) 
	
	for col in args.rankingOrder {
		bundleBuilder.addSingle(col)
	}

	// Add linker column
	bundleBuilder.addMulti({
		axes: [{ anchor: "main", idx: 1 }], // this will do partial axes match (unlike in the model)
		annotations: { "pl7.app/isLinkerColumn": "true" },
		partialAxesMatch: true
	}, "linkers")

	// Add full aa sequence column
	bundleBuilder.addMulti({
		axes: [{ anchor: "main", idx: 1 }],
		annotations: {
			"pl7.app/vdj/isAssemblingFeature": "true",
			"pl7.app/vdj/isMainSequence": "true"
		},
		domain: {
			"pl7.app/alphabet": "aminoacid"
		}
	}, "aaSequence")

	return {
		columns: bundleBuilder.build()
	}
})

wf.body(func(args) {

	// Input arguments
	columns := args.columns
	datasetSpec := columns.getSpec(args.inputAnchor)
	
	topClonotypes := args.topClonotypes

	// Needed conditional variables
	isSingleCell := datasetSpec.axesSpec[1].name == "pl7.app/vdj/scClonotypeKey"
	
	// output containers 
	outputs := {}
	
	////////// Clonotype Filtering //////////
	
	// Build clonotype table
	cloneTable := columns.xsvTableBuilder()
	cloneTable.setAxisHeader(datasetSpec.axesSpec[1].name, "clonotypeKey")
	
	for i, col in args.rankingOrder {
		cloneTable.add(col, {header: "Col" + string(i)})
	
		// If column does not have main anchor axis we have to include theirs
		colsSpec := columns.getSpec(col)
		axesNames := slices.map(colsSpec.axesSpec, func (a) { return a.name})
		if !slices.hasElement(axesNames, datasetSpec.axesSpec[1].name) {
			for na, ax in colsSpec.axesSpec {
				if ax.name != datasetSpec.axesSpec[1].name {
					cloneTable.setAxisHeader(ax.name, "cluster_" + string(i) + string(na))
				}
			}
		}	
	}

	// Columns gotten by query require .key
	linkerAxisSpec := {}
	for i, col in columns.getColumns("linkers") {
		if datasetSpec.axesSpec[1].name == col.spec.axesSpec[1].name {
			cloneTable.add(col.key, {header: "linker." + string(i)})
			cloneTable.setAxisHeader(col.spec.axesSpec[0].name, "cluster_" + string(i))
			linkerAxisSpec["cluster_" + string(i)] = col.spec.axesSpec[0]
		} else if datasetSpec.axesSpec[1].name == col.spec.axesSpec[0].name {
			cloneTable.add(col.key, {header: "linker." + string(i)})
			cloneTable.setAxisHeader(col.spec.axesSpec[1].name, "cluster_" + string(i))
			linkerAxisSpec["cluster_" + string(i)] = col.spec.axesSpec[1]
		}
	}
	cloneTable = cloneTable.build("csv")

	if topClonotypes != undefined {
		// Run sampling script
		sampleClones := exec.builder().
			software(assets.importSoftware("@platforma-open/milaboratories.top-antibodies.sample-clonotypes:main")).
			addFile("filteredClonotypes.csv", cloneTable).
			arg("--csv").arg("filteredClonotypes.csv").
			arg("--n").arg(string(topClonotypes)).
			arg("--out").arg("sampledClonotypes.csv").
			saveFile("sampledClonotypes_top.csv").
			printErrStreamToStdout().
			saveStdoutContent().
			cache(24 * 60 * 60 * 1000).
			run()
		
		// Store outputs
		sampledColsParams := sampledColsConv.getColumns(datasetSpec, linkerAxisSpec)
		sampledColumnsPf := xsv.importFile(sampleClones.getFile("sampledClonotypes_top.csv"), "csv", sampledColsParams)
		outputs["sampledRows"] = pframes.exportFrame(sampledColumnsPf)

    	// Prepare filter col subset for UMAP
    	// Avoid taking cluster axis using other params
    	sampledColsUmapParams := sampledColsUmapConv.getColumns(datasetSpec) 
    	sampledColsUmapPf := xsv.importFile(sampleClones.getFile("sampledClonotypes_top.csv"), "csv", sampledColsUmapParams)
		outputs["sampledRowsUmap"] = pframes.exportFrame(sampledColsUmapPf)
	}
	
	////////// UMAP //////////
	// Generate input TSV with Clonotype ID and aa sequence
	umapTable := columns.xsvTableBuilder()
	umapTable.setAxisHeader(datasetSpec.axesSpec[1].name, "clonotypeKey")
	for col in columns.getColumns("aaSequence") {
		if isSingleCell {
			chainLabel := col.spec.domain["pl7.app/vdj/scClonotypeChain"]
			umapTable.add(col.key, {header: "aaSequence." + chainLabel})
		} else {
			chainLabel := col.spec.axesSpec[0].domain["pl7.app/vdj/chain"]
			umapTable.add(col.key, {header: "aaSequence." + chainLabel})
		}
	}
	umapTable = umapTable.build("tsv")

	// UMAP script should go here
	umapClones := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.top-antibodies.umap:main")).
		addFile("sequences.tsv", umapTable).
		arg("-i").arg("sequences.tsv").
		arg("-u").arg("umap.tsv").
		saveFile("umap.tsv").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()


	umapPf := xsv.importFile(umapClones.getFile("umap.tsv"), "tsv", umapConv.getColumns(datasetSpec))
	outputs["umap"] = pframes.exportFrame(umapPf)

	return {
		outputs: outputs,
		exports: {}
	}
})

