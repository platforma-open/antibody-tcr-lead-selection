// Template for clonotype filtering
self := import("@platforma-sdk/workflow-tengo:tpl")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
render := import("@platforma-sdk/workflow-tengo:render")
sampledColsConv := import(":sampled-cols-conv")
json := import("json")

self.defineOutputs("sampledRows", "finalClonotypesCsv")

self.body(func(inputs) {

    cloneTable := inputs.cloneTable
    datasetSpec := inputs.datasetSpec
    filterMap := inputs.filterMap
    topClonotypes := inputs.topClonotypes

    outputs := {}
    finalClonotypesCsv := undefined
    
    // Run filtering script
    filterResult := exec.builder().
        software(assets.importSoftware("@platforma-open/milaboratories.top-antibodies.sample-clonotypes:filter")).
        mem("16GiB").
        cpu(1).
        addFile("clonotypes.csv", cloneTable).
        arg("--csv").arg("clonotypes.csv").
        arg("--out").arg("filteredClonotypes.csv").
        arg("--filter-map").arg(string(json.encode(filterMap))).
        saveFile("filteredClonotypes.csv").
        printErrStreamToStdout().
        saveStdoutContent().
        cache(24 * 60 * 60 * 1000).
        run()

    // Save filtered CSV file
    filteredClonotypesCsv := filterResult.getFile("filteredClonotypes.csv")

    // Store outputs 
    sampledColsParams := sampledColsConv.getColumns(datasetSpec)
    filteredClonotypesPf := xsv.importFile(filteredClonotypesCsv, "csv", sampledColsParams,
                                        {cpu: 1, mem: "16GiB"})

    // Prepare outputs in case there is no top ranking
    outputs["sampledRows"] = pframes.exportFrame(filteredClonotypesPf)
    finalClonotypesCsv = filteredClonotypesCsv

	if topClonotypes != undefined {

		////////// Top Clonotypes Sampling //////////
		// Run sampling script on filtered data
		sampleClones := exec.builder().
			software(assets.importSoftware("@platforma-open/milaboratories.top-antibodies.sample-clonotypes:main")).
			mem("16GiB").
			cpu(1).
			addFile("filteredClonotypes.csv", filteredClonotypesCsv).
			arg("--csv").arg("filteredClonotypes.csv").
			arg("--n").arg(string(topClonotypes)).
			arg("--out").arg("sampledClonotypes_top.csv").
			saveFile("sampledClonotypes_top.csv").
			printErrStreamToStdout().
			saveStdoutContent().
			cache(24 * 60 * 60 * 1000).
			run()

		// Save top clonotypes CSV file
		finalClonotypesCsv = sampleClones.getFile("sampledClonotypes_top.csv")
		
		// Store outputs 
		sampledColumnsPf := xsv.importFile(finalClonotypesCsv, "csv", sampledColsParams,
											{cpu: 1, mem: "16GiB"})
		outputs["sampledRows"] = pframes.exportFrame(sampledColumnsPf)
	} 

    outputs["finalClonotypesCsv"] = finalClonotypesCsv

    return outputs
}) 