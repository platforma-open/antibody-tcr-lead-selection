self := import("@platforma-sdk/workflow-tengo:tpl")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
file := import("@platforma-sdk/workflow-tengo:file")
json := import("json")

self.defineOutputs("antigenPdb", "cleanAntigenPdb")


self.body(func(inputs) {
	antigenSequence := inputs.antigenSequence

	antigenPdbPath := "esmfold_antigen.pdb"
	cleanAntigenPdbPath := "esmfold_antigen_clean.pdb"

    // Run ESMFold to generate the antigen PDB file
    esmFoldCmd := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.top-antibodies.esmfold-v1:main")).
		mem("8GiB").
		cpu(1).
		arg("--sequence").arg(antigenSequence).
		arg("--output-path").arg(".").
		arg("--output-file").arg(antigenPdbPath).
		arg("--output-file-clean").arg(cleanAntigenPdbPath).
		saveFile(antigenPdbPath).
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()

    antigenPdb := esmFoldCmd.getFile(antigenPdbPath)
	cleanAntigenPdb := esmFoldCmd.getFile(cleanAntigenPdbPath)


    return {
        antigenPdb: file.exportFile(antigenPdb),
		cleanAntigenPdb: file.exportFile(cleanAntigenPdb)
    }
})