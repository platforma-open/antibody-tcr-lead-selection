// Template for clonotype filtering
self := import("@platforma-sdk/workflow-tengo:tpl")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
render := import("@platforma-sdk/workflow-tengo:render")
sampledColsConv := import(":sampled-cols-conv")
json := import("json")

self.defineOutputs("filteredClonotypes", "filteredCsv")

self.body(func(inputs) {

    cloneTable := inputs.cloneTable
    datasetSpec := inputs.datasetSpec
    filterMap := inputs.filterMap
    
    // Run filtering script
    filteredCsv := undefined
    if len(filterMap) > 0 {
        // Run filtering script
        filterResult := exec.builder().
            software(assets.importSoftware("@platforma-open/milaboratories.top-antibodies.sample-clonotypes:filter")).
            mem("16GiB").
            cpu(1).
            addFile("clonotypes.csv", cloneTable).
            arg("--csv").arg("clonotypes.csv").
            arg("--out").arg("filteredClonotypes.csv").
            arg("--filter-map").arg(string(json.encode(filterMap))).
            saveFile("filteredClonotypes.csv").
            printErrStreamToStdout().
            saveStdoutContent().
            cache(24 * 60 * 60 * 1000).
            run()

        // Save filtered CSV file
        filteredCsv = filterResult.getFile("filteredClonotypes.csv")
    } else {
        // No filters, use original table
        filteredCsv = cloneTable
    }

    // Store outputs 
    sampledColsParams := sampledColsConv.getColumns(datasetSpec)
    sampledColumnsPf := xsv.importFile(filteredCsv, "csv", sampledColsParams,
                                        {cpu: 1, mem: "16GiB"})

    return {
        filteredClonotypes: pframes.exportFrame(sampledColumnsPf),
        filteredCsv: filteredCsv
    }
}) 